# BASE IMAGE alpine to make the image small
# Bigger is not always better :)

##### BUILD BASE #####
FROM golang:1.24-alpine3.21 AS build-base

WORKDIR /usr/src/app

COPY go.mod go.sum ./

# Use cache mount to speed up install of existing dependencies
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    go mod vendor

##### DEV #####

# DEV branching for hot reload
FROM build-base AS dev

# TODO: somehow get the downloaded binaries from the build-base to make sure that the binaries are available
# and not downloaded again

# additional deps for hot reload and inspecting in go
# Use the same cache mount technique here for air & dlv
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    go install github.com/air-verse/air@latest && \
    go install github.com/go-delve/delve/cmd/dlv@latest

# copy source code
COPY . .

CMD ["air"]


##### BUILD PROD #####

FROM build-base AS build-prod

WORKDIR /usr/src/app

COPY . .

# compile main app
RUN --mount=type=cache,target=/go/pkg/mod \
    --mount=type=cache,target=/root/.cache/go-build \
    go build -mod=vendor -o ./bin/main cmd/api/main.go && \
    go build -mod=vendor -o ./bin/healthcheck cmd/healthcheck/healthcheck.go
    
##### DEPLOYABLE IMAGE #####
# FROM scratch AS runner
FROM alpine:3.21.3 AS runner
    
WORKDIR /usr/src/app

# copy passwd files
COPY --from=build-prod /etc/passwd /etc/passwd

# copy the app binary
COPY --from=build-prod /usr/src/app/bin/main main
COPY --from=build-prod /usr/src/app/bin/healthcheck healthcheck

# Create a group and user
RUN addgroup -S appgroup && adduser -S non-root -G appgroup

# Tell docker that all future commands should run as the appuser user
USER non-root

EXPOSE 8080

CMD ["sh", "-c", "./main"]
